;; Analyzed by ClojureScript 0.0-3308
{:use-macros nil, :excludes #{}, :name uxbox.shapes.core, :imports nil, :requires {pubsub uxbox.pubsub, uxbox.pubsub uxbox.pubsub, geo uxbox.geometry, uxbox.geometry uxbox.geometry, reader cljs.reader, cljs.reader cljs.reader, reagent.core reagent.core}, :uses {atom reagent.core}, :defs {toolbar-coords {:protocol-inline nil, :meta {:file "/home/alotor/Projects/UXBox/front/src/uxbox/shapes/core.cljs", :line 14, :column 4, :end-line 14, :end-column 18, :protocol uxbox.shapes.core/Shape, :doc "Retrieves a pair of coordinates (px, py) where the toolbar has to be displayed for this shape", :arglists (quote ([shape]))}, :protocol uxbox.shapes.core/Shape, :name uxbox.shapes.core/toolbar-coords, :variadic false, :file "src/uxbox/shapes/core.cljs", :end-column 18, :method-params ([shape]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 10, :end-line 14, :max-fixed-arity 1, :fn-var true, :arglists (quote ([shape])), :doc "Retrieves a pair of coordinates (px, py) where the toolbar has to be displayed for this shape"}, Circle {:num-fields 9, :protocols #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection uxbox.shapes.core/Shape cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :name uxbox.shapes.core/Circle, :file "src/uxbox/shapes/core.cljs", :end-column 18, :type true, :column 12, :internal-ctor true, :line 256, :record true, :end-line 256, :skip-protocol-flag #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}}, map->Circle {:protocol-inline nil, :meta {:file "/home/alotor/Projects/UXBox/front/src/uxbox/shapes/core.cljs", :line 256, :column 12, :end-line 256, :end-column 18, :internal-ctor true, :factory :map, :arglists (quote ([G__22995]))}, :name uxbox.shapes.core/map->Circle, :variadic false, :file "src/uxbox/shapes/core.cljs", :end-column 18, :method-params ([G__22995]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :map, :line 256, :end-line 256, :max-fixed-arity 1, :fn-var true, :arglists (quote ([G__22995]))}, shape->selected-svg {:protocol-inline nil, :meta {:file "/home/alotor/Projects/UXBox/front/src/uxbox/shapes/core.cljs", :line 20, :column 4, :end-line 20, :end-column 23, :protocol uxbox.shapes.core/Shape, :doc "Returns the markup for the SVG of the elements selecting the shape", :arglists (quote ([shape]))}, :protocol uxbox.shapes.core/Shape, :name uxbox.shapes.core/shape->selected-svg, :variadic false, :file "src/uxbox/shapes/core.cljs", :end-column 23, :method-params ([shape]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 10, :end-line 20, :max-fixed-arity 1, :fn-var true, :arglists (quote ([shape])), :doc "Returns the markup for the SVG of the elements selecting the shape"}, shape->svg {:protocol-inline nil, :meta {:file "/home/alotor/Projects/UXBox/front/src/uxbox/shapes/core.cljs", :line 17, :column 4, :end-line 17, :end-column 14, :protocol uxbox.shapes.core/Shape, :doc "Returns the markup for the SVG of static shape", :arglists (quote ([shape]))}, :protocol uxbox.shapes.core/Shape, :name uxbox.shapes.core/shape->svg, :variadic false, :file "src/uxbox/shapes/core.cljs", :end-column 14, :method-params ([shape]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 10, :end-line 17, :max-fixed-arity 1, :fn-var true, :arglists (quote ([shape])), :doc "Returns the markup for the SVG of static shape"}, map->Path {:protocol-inline nil, :meta {:file "/home/alotor/Projects/UXBox/front/src/uxbox/shapes/core.cljs", :line 192, :column 12, :end-line 192, :end-column 16, :internal-ctor true, :factory :map, :arglists (quote ([G__22967]))}, :name uxbox.shapes.core/map->Path, :variadic false, :file "src/uxbox/shapes/core.cljs", :end-column 16, :method-params ([G__22967]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :map, :line 192, :end-line 192, :max-fixed-arity 1, :fn-var true, :arglists (quote ([G__22967]))}, map->Line {:protocol-inline nil, :meta {:file "/home/alotor/Projects/UXBox/front/src/uxbox/shapes/core.cljs", :line 38, :column 12, :end-line 38, :end-column 16, :internal-ctor true, :factory :map, :arglists (quote ([G__22912]))}, :name uxbox.shapes.core/map->Line, :variadic false, :file "src/uxbox/shapes/core.cljs", :end-column 16, :method-params ([G__22912]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :map, :line 38, :end-line 38, :max-fixed-arity 1, :fn-var true, :arglists (quote ([G__22912]))}, Path {:num-fields 10, :protocols #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection uxbox.shapes.core/Shape cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :name uxbox.shapes.core/Path, :file "src/uxbox/shapes/core.cljs", :end-column 16, :type true, :column 12, :internal-ctor true, :line 192, :record true, :end-line 192, :skip-protocol-flag #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}}, new-path-shape {:protocol-inline nil, :meta {:file "/home/alotor/Projects/UXBox/front/src/uxbox/shapes/core.cljs", :line 248, :column 7, :end-line 248, :end-column 21, :arglists (quote ([x y width height path icowidth icoheight])), :doc "Retrieves a path with the default parameters"}, :name uxbox.shapes.core/new-path-shape, :variadic false, :file "src/uxbox/shapes/core.cljs", :end-column 21, :method-params ([x y width height path icowidth icoheight]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 248, :end-line 248, :max-fixed-arity 7, :fn-var true, :arglists (quote ([x y width height path icowidth icoheight])), :doc "Retrieves a path with the default parameters"}, map->Rectangle {:protocol-inline nil, :meta {:file "/home/alotor/Projects/UXBox/front/src/uxbox/shapes/core.cljs", :line 122, :column 12, :end-line 122, :end-column 21, :internal-ctor true, :factory :map, :arglists (quote ([G__22939]))}, :name uxbox.shapes.core/map->Rectangle, :variadic false, :file "src/uxbox/shapes/core.cljs", :end-column 21, :method-params ([G__22939]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :map, :line 122, :end-line 122, :max-fixed-arity 1, :fn-var true, :arglists (quote ([G__22939]))}, ->Line {:protocol-inline nil, :meta {:file "/home/alotor/Projects/UXBox/front/src/uxbox/shapes/core.cljs", :line 38, :column 12, :end-line 38, :end-column 16, :internal-ctor true, :factory :positional, :arglists (quote ([x1 y1 x2 y2 stroke stroke-width stroke-opacity rotate]))}, :name uxbox.shapes.core/->Line, :variadic false, :file "src/uxbox/shapes/core.cljs", :end-column 16, :method-params ([x1 y1 x2 y2 stroke stroke-width stroke-opacity rotate]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :positional, :line 38, :end-line 38, :max-fixed-arity 8, :fn-var true, :arglists (quote ([x1 y1 x2 y2 stroke stroke-width stroke-opacity rotate]))}, Rectangle {:num-fields 12, :protocols #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection uxbox.shapes.core/Shape cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :name uxbox.shapes.core/Rectangle, :file "src/uxbox/shapes/core.cljs", :end-column 21, :type true, :column 12, :internal-ctor true, :line 122, :record true, :end-line 122, :skip-protocol-flag #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}}, move-delta {:protocol-inline nil, :meta {:file "/home/alotor/Projects/UXBox/front/src/uxbox/shapes/core.cljs", :line 26, :column 4, :end-line 26, :end-column 14, :protocol uxbox.shapes.core/Shape, :doc "Moves the shape to an increment given by the delta-x and delta-y coordinates", :arglists (quote ([shape delta-x delta-y]))}, :protocol uxbox.shapes.core/Shape, :name uxbox.shapes.core/move-delta, :variadic false, :file "src/uxbox/shapes/core.cljs", :end-column 14, :method-params ([shape delta-x delta-y]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 10, :end-line 26, :max-fixed-arity 3, :fn-var true, :arglists (quote ([shape delta-x delta-y])), :doc "Moves the shape to an increment given by the delta-x and delta-y coordinates"}, Line {:num-fields 8, :protocols #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection uxbox.shapes.core/Shape cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :name uxbox.shapes.core/Line, :file "src/uxbox/shapes/core.cljs", :end-column 16, :type true, :column 12, :internal-ctor true, :line 38, :record true, :end-line 38, :skip-protocol-flag #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}}, generate-transformation {:protocol-inline nil, :meta {:file "/home/alotor/Projects/UXBox/front/src/uxbox/shapes/core.cljs", :line 30, :column 7, :end-line 30, :end-column 30, :arglists (quote ([{:keys [rotate center]}]))}, :name uxbox.shapes.core/generate-transformation, :variadic false, :file "src/uxbox/shapes/core.cljs", :end-column 30, :method-params ([p__22907]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 30, :end-line 30, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{:keys [rotate center]}]))}, shape->drawing-svg {:protocol-inline nil, :meta {:file "/home/alotor/Projects/UXBox/front/src/uxbox/shapes/core.cljs", :line 23, :column 4, :end-line 23, :end-column 22, :protocol uxbox.shapes.core/Shape, :doc "Returns the markup for the SVG of the shape while is bein drawed", :arglists (quote ([shape]))}, :protocol uxbox.shapes.core/Shape, :name uxbox.shapes.core/shape->drawing-svg, :variadic false, :file "src/uxbox/shapes/core.cljs", :end-column 22, :method-params ([shape]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 10, :end-line 23, :max-fixed-arity 1, :fn-var true, :arglists (quote ([shape])), :doc "Returns the markup for the SVG of the shape while is bein drawed"}, new-circle {:protocol-inline nil, :meta {:file "/home/alotor/Projects/UXBox/front/src/uxbox/shapes/core.cljs", :line 316, :column 7, :end-line 316, :end-column 17, :arglists (quote ([cx cy r])), :doc "Retrieves a circle with the default parameters"}, :name uxbox.shapes.core/new-circle, :variadic false, :file "src/uxbox/shapes/core.cljs", :end-column 17, :method-params ([cx cy r]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 316, :end-line 316, :max-fixed-arity 3, :fn-var true, :arglists (quote ([cx cy r])), :doc "Retrieves a circle with the default parameters"}, ->Path {:protocol-inline nil, :meta {:file "/home/alotor/Projects/UXBox/front/src/uxbox/shapes/core.cljs", :line 192, :column 12, :end-line 192, :end-column 16, :internal-ctor true, :factory :positional, :arglists (quote ([path icowidth icoheight x y width height fill fill-opacity rotate]))}, :name uxbox.shapes.core/->Path, :variadic false, :file "src/uxbox/shapes/core.cljs", :end-column 16, :method-params ([path icowidth icoheight x y width height fill fill-opacity rotate]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :positional, :line 192, :end-line 192, :max-fixed-arity 10, :fn-var true, :arglists (quote ([path icowidth icoheight x y width height fill fill-opacity rotate]))}, ->Rectangle {:protocol-inline nil, :meta {:file "/home/alotor/Projects/UXBox/front/src/uxbox/shapes/core.cljs", :line 122, :column 12, :end-line 122, :end-column 21, :internal-ctor true, :factory :positional, :arglists (quote ([x y width height rx ry fill fill-opacity stroke stroke-width stroke-opacity rotate]))}, :name uxbox.shapes.core/->Rectangle, :variadic false, :file "src/uxbox/shapes/core.cljs", :end-column 21, :method-params ([x y width height rx ry fill fill-opacity stroke stroke-width stroke-opacity rotate]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :positional, :line 122, :end-line 122, :max-fixed-arity 12, :fn-var true, :arglists (quote ([x y width height rx ry fill fill-opacity stroke stroke-width stroke-opacity rotate]))}, ->Circle {:protocol-inline nil, :meta {:file "/home/alotor/Projects/UXBox/front/src/uxbox/shapes/core.cljs", :line 256, :column 12, :end-line 256, :end-column 18, :internal-ctor true, :factory :positional, :arglists (quote ([cx cy r fill fill-opacity stroke stroke-width stroke-opacity rotate]))}, :name uxbox.shapes.core/->Circle, :variadic false, :file "src/uxbox/shapes/core.cljs", :end-column 18, :method-params ([cx cy r fill fill-opacity stroke stroke-width stroke-opacity rotate]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :positional, :line 256, :end-line 256, :max-fixed-arity 9, :fn-var true, :arglists (quote ([cx cy r fill fill-opacity stroke stroke-width stroke-opacity rotate]))}, Shape {:meta {:file "/home/alotor/Projects/UXBox/front/src/uxbox/shapes/core.cljs", :line 10, :column 14, :end-line 10, :end-column 19, :doc nil, :protocol-symbol true, :protocol-info {:methods {intersect [[shape px py]], toolbar-coords [[shape]], shape->svg [[shape]], shape->selected-svg [[shape]], shape->drawing-svg [[shape]], move-delta [[shape delta-x delta-y]]}}}, :protocol-symbol true, :name uxbox.shapes.core/Shape, :file "src/uxbox/shapes/core.cljs", :end-column 19, :column 1, :line 10, :protocol-info {:methods {intersect [[shape px py]], toolbar-coords [[shape]], shape->svg [[shape]], shape->selected-svg [[shape]], shape->drawing-svg [[shape]], move-delta [[shape delta-x delta-y]]}}, :info nil, :end-line 10, :impls #{uxbox.shapes.core/Line uxbox.shapes.core/Path uxbox.shapes.core/Circle uxbox.shapes.core/Rectangle}, :doc nil}, new-rectangle {:protocol-inline nil, :meta {:file "/home/alotor/Projects/UXBox/front/src/uxbox/shapes/core.cljs", :line 184, :column 7, :end-line 184, :end-column 20, :arglists (quote ([x y width height])), :doc "Retrieves a line with the default parameters"}, :name uxbox.shapes.core/new-rectangle, :variadic false, :file "src/uxbox/shapes/core.cljs", :end-column 20, :method-params ([x y width height]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 184, :end-line 184, :max-fixed-arity 4, :fn-var true, :arglists (quote ([x y width height])), :doc "Retrieves a line with the default parameters"}, new-line {:protocol-inline nil, :meta {:file "/home/alotor/Projects/UXBox/front/src/uxbox/shapes/core.cljs", :line 114, :column 7, :end-line 114, :end-column 15, :arglists (quote ([x1 y1 x2 y2])), :doc "Retrieves a line with the default parameters"}, :name uxbox.shapes.core/new-line, :variadic false, :file "src/uxbox/shapes/core.cljs", :end-column 15, :method-params ([x1 y1 x2 y2]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 114, :end-line 114, :max-fixed-arity 4, :fn-var true, :arglists (quote ([x1 y1 x2 y2])), :doc "Retrieves a line with the default parameters"}, intersect {:protocol-inline nil, :meta {:file "/home/alotor/Projects/UXBox/front/src/uxbox/shapes/core.cljs", :line 11, :column 4, :end-line 11, :end-column 13, :protocol uxbox.shapes.core/Shape, :doc "Retrieves true when the point (px, py) is inside the shape", :arglists (quote ([shape px py]))}, :protocol uxbox.shapes.core/Shape, :name uxbox.shapes.core/intersect, :variadic false, :file "src/uxbox/shapes/core.cljs", :end-column 13, :method-params ([shape px py]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 10, :end-line 11, :max-fixed-arity 3, :fn-var true, :arglists (quote ([shape px py])), :doc "Retrieves true when the point (px, py) is inside the shape"}}, :require-macros nil, :cljs.analyzer/constants {:seen #{:y :path :rx :r :stroke :transform :preserveAspectRatio :stroke-opacity :fill :circle :y1 :viewport-mouse-move :width :fillOpacity :icoheight :icowidth :center :style :g :line :stroke-width :strokeWidth :cx :cy :strokeDasharray :svg :rotate :d :x :x1 :y2 :viewBox :rect :x2 :ry :fill-opacity :height}, :order [:rotate :center :x :y :x1 :y1 :x2 :y2 :stroke :stroke-width :stroke-opacity :line :strokeWidth :transform :g :rect :width :height :fill :fill-opacity :viewport-mouse-move :style :rx :ry :fillOpacity :strokeDasharray :path :icowidth :icoheight :svg :viewBox :preserveAspectRatio :d :cx :cy :r :circle]}, :doc nil}